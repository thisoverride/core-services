{"version":3,"file":"SystemXControl.js","sourceRoot":"","sources":["../../src/lib/SystemXControl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from 'os';\nimport { spawn } from 'child_process';\nimport AdvancedLogger  from './utils/logger/AdvancedLogger';\nimport { HealthCheck, HealthCheckResult, SystemState, SystemStatus } from '../../@type/global';\nimport { SystemError } from './utils/error/SystemError';\nimport { Mutex } from 'async-mutex';\n\nexport class SystemXControl {\n  private static readonly COMMAND_TIMEOUT = 5000;\n  private static readonly HEALTH_THRESHOLDS = {\n    DISK_USAGE: 90,\n    MEMORY_USAGE: 95,\n    CPU_USAGE: 90\n  };\n  private static readonly THERMAL_PATH = '/sys/class/thermal/thermal_zone0/temp';\n  private static readonly commandMutex = new Mutex();\n  \n  private static systemState: SystemState = {\n    isShuttingDown: false,\n    isRestarting: false,\n    isSleeping: false\n  };\n\n  private static readonly ALLOWED_COMMANDS: Record<string, string[]> = {\n    'shutdown': ['-h', '-r', '-c'],\n    'systemctl': ['suspend'],\n    'pm-suspend': [],\n    'whoami': [],\n    'top': ['-bn1'],\n    'df': ['/', '--output=size,used,avail'],\n    'which': [],\n    'cat': [SystemXControl.THERMAL_PATH]\n  };\n\n  constructor() {\n    //@ts-ignore\n    if (process.getuid() !== 0) {\n      throw new SystemError('Root privileges required', 'SYSTEM_ROOT_REQUIRED');\n    }\n  }\n\n  public static async getStatus(): Promise<SystemStatus> {\n    try {\n      const temperature = await this.readTemperature();\n      const diskSpace = await this.getDiskSpace();\n      const cpuUsage = await this.getCPUUsage();\n\n      return {\n        uptime: os.uptime(),\n        loadAverage: os.loadavg(),\n        totalMemory: os.totalmem(),\n        freeMemory: os.freemem(),\n        cpuUsage,\n        temperature,\n        diskSpace\n      };\n    } catch (error) {\n      AdvancedLogger.error('Failed to get system status', { error });\n      // throw this.wrapError(error);\n    }\n  }\n\n  public static async sleep(): Promise<void> {\n    return this.commandMutex.runExclusive(async () => {\n      try {\n        this.validateStateTransition('isSleeping');\n        \n        const hasSystemctl = await this.checkCommand('systemctl');\n        if (hasSystemctl) {\n          await this.spawnCommand('systemctl', ['suspend']);\n        } else {\n          const hasPmSuspend = await this.checkCommand('pm-suspend');\n          if (!hasPmSuspend) {\n            throw new SystemError('No suspend command available', 'SYSTEM_SUSPEND_UNAVAILABLE');\n          }\n          await this.spawnCommand('pm-suspend', []);\n        }\n      } catch (error) {\n        AdvancedLogger.error('Failed to suspend system', { error });\n        throw this.wrapError(error);\n      } finally {\n        this.systemState.isSleeping = false;\n      }\n    });\n  }\n\n  public static async restart(): Promise<void> {\n    return this.commandMutex.runExclusive(async () => {\n      try {\n        this.validateStateTransition('isRestarting');\n        await this.spawnCommand('shutdown', ['-r', '+1']);\n      } catch (error) {\n        AdvancedLogger.error('Failed to restart system', { error });\n        throw this.wrapError(error);\n      }\n    });\n  }\n\n  public static async shutdown(): Promise<void> {\n    return this.commandMutex.runExclusive(async () => {\n      try {\n        this.validateStateTransition('isShuttingDown');\n        await this.spawnCommand('shutdown', ['-h', '+1']);\n      } catch (error) {\n        AdvancedLogger.error('Failed to shutdown system', { error });\n        throw this.wrapError(error);\n      }\n    });\n  }\n\n  public static async cancelShutdown(): Promise<void> {\n    return this.commandMutex.runExclusive(async () => {\n      try {\n        await this.spawnCommand('shutdown', ['-c']);\n        this.resetSystemState();\n      } catch (error) {\n        AdvancedLogger.error('Failed to cancel shutdown', { error });\n        throw this.wrapError(error);\n      }\n    });\n  }\n\n  public static async healthCheck(): Promise<HealthCheckResult> {\n    try {\n      const [diskCheck, memoryCheck, cpuCheck] = await Promise.all([\n        this.checkDiskSpace(),\n        this.checkMemory(),\n        this.checkCPU()\n      ]);\n\n      const allHealthy = [diskCheck, memoryCheck, cpuCheck].every(check => check.healthy);\n      \n      return {\n        healthy: allHealthy,\n        message: allHealthy ? 'System is healthy' : 'System health check failed',\n        checks: [diskCheck, memoryCheck, cpuCheck]\n      };\n    } catch (error) {\n      AdvancedLogger.error('Health check failed', { error });\n      throw this.wrapError(error);\n    }\n  }\n\n  private static validateCommandAndArgs(command: string, args: string[]): void {\n    const allowedArgs = this.ALLOWED_COMMANDS[command];\n    if (!allowedArgs) {\n      throw new SystemError('Command not allowed', 'SYSTEM_COMMAND_NOT_ALLOWED');\n    }\n\n    if (allowedArgs.length > 0 && !args.every(arg => allowedArgs.includes(arg))) {\n      throw new SystemError('Command arguments not allowed', 'SYSTEM_COMMAND_ARGS_NOT_ALLOWED');\n    }\n  }\n\n  private static async spawnCommand(command: string, args: string[]): Promise<string> {\n    this.validateCommandAndArgs(command, args);\n\n    return new Promise((resolve, reject) => {\n      let output = '';\n      let error = '';\n      \n      const process = spawn(command, args, { stdio: 'pipe' });\n      const timeout = setTimeout(() => {\n        process.kill();\n        reject(new SystemError('Command timeout', 'SYSTEM_COMMAND_TIMEOUT'));\n      }, this.COMMAND_TIMEOUT);\n\n      process.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n\n      process.stderr.on('data', (data) => {\n        error += data.toString();\n      });\n\n      process.on('close', (code) => {\n        clearTimeout(timeout);\n        if (code === 0) {\n          AdvancedLogger.info('Command executed successfully', { command, args });\n          resolve(output.trim());\n        } else {\n          reject(new SystemError(`Command failed with code ${code}: ${error}`, 'SYSTEM_COMMAND_FAILED'));\n        }\n      });\n\n      process.on('error', (err) => {\n        clearTimeout(timeout);\n        reject(new SystemError(`Command execution error: ${err.message}`, 'SYSTEM_COMMAND_FAILED'));\n      });\n    });\n  }\n\n  private static async readTemperature(): Promise<number | undefined> {\n    try {\n      const tempOutput = await this.spawnCommand('cat', [this.THERMAL_PATH]);\n      return parseInt(tempOutput) / 1000;\n    } catch {\n      return undefined;\n    }\n  }\n\n  private static async getDiskSpace() {\n    const output = await this.spawnCommand('df', ['/', '--output=size,used,avail']);\n    const lines = output.trim().split('\\n');\n    const [total, used, free] = lines[1].trim().split(/\\s+/).map(x => parseInt(x) * 1024);\n    return { total, used, free };\n  }\n\n  private static async getCPUUsage(): Promise<number> {\n    const output = await this.spawnCommand('top', ['-bn1']);\n    const cpuLine = output.split('\\n').find(line => line.includes('Cpu(s)'));\n    if (!cpuLine) {\n      throw new SystemError('Failed to parse CPU usage', 'SYSTEM_PARSE_ERROR');\n    }\n    return parseFloat(cpuLine.split(',')[0].split(':')[1]);\n  }\n\n  private static async checkCommand(command: string): Promise<boolean> {\n    try {\n      await this.spawnCommand('which', [command]);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private static async checkDiskSpace(): Promise<HealthCheck> {\n    const { total, used } = await this.getDiskSpace();\n    const percentageUsed = (used / total) * 100;\n    \n    return {\n      component: 'disk',\n      healthy: percentageUsed < this.HEALTH_THRESHOLDS.DISK_USAGE,\n      details: { percentageUsed }\n    };\n  }\n\n  private static checkMemory(): HealthCheck {\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const percentageUsed = ((totalMemory - freeMemory) / totalMemory) * 100;\n    \n    return {\n      component: 'memory',\n      healthy: percentageUsed < this.HEALTH_THRESHOLDS.MEMORY_USAGE,\n      details: { percentageUsed }\n    };\n  }\n\n  private static async checkCPU(): Promise<HealthCheck> {\n    const cpuUsage = await this.getCPUUsage();\n    \n    return {\n      component: 'cpu',\n      healthy: cpuUsage < this.HEALTH_THRESHOLDS.CPU_USAGE,\n      details: { cpuUsage }\n    };\n  }\n\n  private static resetSystemState(): void {\n    this.systemState = {\n      isShuttingDown: false,\n      isRestarting: false,\n      isSleeping: false\n    };\n  }\n\n  private static validateStateTransition(action: keyof SystemState): void {\n    if (Object.values(this.systemState).some(state => state)) {\n      throw new SystemError('Invalid system state transition', 'SYSTEM_STATE_TRANSITION_INVALID');\n    }\n    this.systemState[action] = true;\n  }\n\n  private static wrapError(error: any): SystemError {\n    if (error instanceof SystemError) {\n      return error;\n    }\n    return new SystemError(error.message || 'Unknown error occurred', 'SYSTEM_UNKNOWN_ERROR');\n  }\n}"]}