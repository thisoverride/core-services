{"version":3,"file":"AdvancedLogger.js","sourceRoot":"","sources":["../../../../src/lib/utils/logger/AdvancedLogger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA8B;AAC9B,0FAAwD;AACxD,uCAAyB;AAEzB,MAAqB,cAAc;IAMjC,gBAAuB,CAAC;IAWhB,MAAM,CAAC,kBAAkB;QAC/B,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YACjC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,YAAY;QACzB,OAAO,iBAAO,CAAC,YAAY,CAAC;YAC1B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,MAAM;YACtC,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,SAAS,CAAC;gBACvB,MAAM,EAAE,qBAAqB;aAC9B,CAAC,EACF,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EACtC,iBAAO,CAAC,MAAM,CAAC,KAAK,EAAE,EACtB,iBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CACtB;YACD,WAAW,EAAE;gBACX,OAAO,EAAE,mBAAmB;gBAC5B,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;aAClC;YACD,UAAU,EAAE;gBAEV,IAAI,mCAAe,CAAC;oBAClB,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,mBAAmB;oBAC5C,WAAW,EAAE,YAAY;oBACzB,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,IAAI,CAAC,QAAQ;oBACtB,QAAQ,EAAE,IAAI,CAAC,SAAS;oBACxB,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE;iBAC5B,CAAC;gBAEF,IAAI,mCAAe,CAAC;oBAClB,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,sBAAsB;oBAC/C,WAAW,EAAE,YAAY;oBACzB,OAAO,EAAE,IAAI,CAAC,QAAQ;oBACtB,QAAQ,EAAE,IAAI,CAAC,SAAS;oBACxB,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE;iBAC5B,CAAC;aACH;SACF,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,YAAY;QACzB,OAAO,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC3B,iBAAO,CAAC,MAAM,CAAC,SAAS,CAAC;YACvB,MAAM,EAAE,qBAAqB;SAC9B,CAAC,EACF,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE;YAC/D,IAAI,UAAU,GAAG,GAAG,SAAS,KAAK,KAAK,CAAC,WAAW,EAAE,MAAM,OAAO,EAAE,CAAC;YAErE,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAEjC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,YAAY,EAAE,GAAG,IAAI,CAAC;gBACvD,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACzC,UAAU,IAAI,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC;gBACrD,CAAC;YACH,CAAC;YAED,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,mBAAmB;QAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,iBAAO,CAAC,MAAM,CAAC,MAAM,EAAE,EACvB,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE;gBAC/D,IAAI,UAAU,GAAG,GAAG,SAAS,KAAK,KAAK,MAAM,OAAO,EAAE,CAAC;gBAEvD,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACjC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,YAAY,EAAE,GAAG,IAAI,CAAC;oBACvD,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACzC,UAAU,IAAI,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;oBAC9D,CAAC;gBACH,CAAC;gBAED,OAAO,UAAU,CAAC;YACpB,CAAC,CAAC,CACH;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAGM,MAAM,CAAC,IAAI,CAAC,OAAe,EAAE,IAA0B;QAC5D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,OAAe,EAAE,IAA0B;QAC5D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,OAAe,EAAE,IAA0B;QAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACzB,GAAG,IAAI;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;SACzB,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,OAAe,EAAE,IAA0B;QAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC/E,CAAC;IAGM,MAAM,CAAC,SAAS;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,KAAa;QACrC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC5B,CAAC;IAEM,MAAM,CAAC,aAAa;QACzB,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YAChC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC1C,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;gBACvC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;;AA5IuB,sBAAO,GAAG,MAAM,CAAC;AACjB,uBAAQ,GAAG,IAAI,CAAC;AAChB,wBAAS,GAAG,KAAK,CAAC;AAK1C;IACE,cAAc,CAAC,kBAAkB,EAAE,CAAC;IACpC,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;IAEtD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;QAC1C,cAAc,CAAC,mBAAmB,EAAE,CAAC;IACvC,CAAC;AACH,CAAC,GAAA,CAAA;kBAfkB,cAAc","sourcesContent":["import winston from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport * as fs from 'fs';\n\nexport default class AdvancedLogger {\n  private static readonly LOG_DIR = 'logs';\n  private static readonly MAX_SIZE = '5m';\n  private static readonly MAX_FILES = '14d';\n  private static logger: winston.Logger;\n\n  private constructor() {}\n\n  static {\n    AdvancedLogger.createLogDirectory();\n    AdvancedLogger.logger = AdvancedLogger.createLogger();\n\n    if (process.env.NODE_ENV !== 'production') {\n      AdvancedLogger.addConsoleTransport();\n    }\n  }\n\n  private static createLogDirectory(): void {\n    if (!fs.existsSync(this.LOG_DIR)) {\n      fs.mkdirSync(this.LOG_DIR, { recursive: true });\n    }\n  }\n\n  private static createLogger(): winston.Logger {\n    return winston.createLogger({\n      level: process.env.LOG_LEVEL || 'info',\n      format: winston.format.combine(\n        winston.format.timestamp({\n          format: 'YYYY-MM-DD HH:mm:ss'\n        }),\n        winston.format.errors({ stack: true }),\n        winston.format.splat(),\n        winston.format.json()\n      ),\n      defaultMeta: {\n        service: 'photobooth-system',\n        environment: process.env.NODE_ENV\n      },\n      transports: [\n        // Rotation quotidienne des logs d'erreur\n        new DailyRotateFile({\n          filename: `${this.LOG_DIR}/error-%DATE%.log`,\n          datePattern: 'YYYY-MM-DD',\n          level: 'error',\n          maxSize: this.MAX_SIZE,\n          maxFiles: this.MAX_FILES,\n          format: this.getLogFormat()\n        }),\n        // Rotation quotidienne des logs combinés\n        new DailyRotateFile({\n          filename: `${this.LOG_DIR}/combined-%DATE%.log`,\n          datePattern: 'YYYY-MM-DD',\n          maxSize: this.MAX_SIZE,\n          maxFiles: this.MAX_FILES,\n          format: this.getLogFormat()\n        })\n      ]\n    });\n  }\n\n  private static getLogFormat() {\n    return winston.format.combine(\n      winston.format.timestamp({\n        format: 'YYYY-MM-DD HH:mm:ss'\n      }),\n      winston.format.printf(({ level, message, timestamp, ...meta }) => {\n        let logMessage = `${timestamp} [${level.toUpperCase()}]: ${message}`;\n        \n        if (Object.keys(meta).length > 0) {\n          // Exclusion des métadonnées par défaut\n          const { service, environment, ...relevantMeta } = meta;\n          if (Object.keys(relevantMeta).length > 0) {\n            logMessage += ` | ${JSON.stringify(relevantMeta)}`;\n          }\n        }\n        \n        return logMessage;\n      })\n    );\n  }\n\n  private static addConsoleTransport(): void {\n    this.logger.add(\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.colorize(),\n          winston.format.simple(),\n          winston.format.printf(({ level, message, timestamp, ...meta }) => {\n            let logMessage = `${timestamp} [${level}]: ${message}`;\n            \n            if (Object.keys(meta).length > 0) {\n              const { service, environment, ...relevantMeta } = meta;\n              if (Object.keys(relevantMeta).length > 0) {\n                logMessage += ` | ${JSON.stringify(relevantMeta, null, 2)}`;\n              }\n            }\n            \n            return logMessage;\n          })\n        )\n      })\n    );\n  }\n\n  // Interface publique pour le logging\n  public static info(message: string, meta?: Record<string, any>): void {\n    this.logger.info(message, { ...meta, timestamp: new Date().toISOString() });\n  }\n\n  public static warn(message: string, meta?: Record<string, any>): void {\n    this.logger.warn(message, { ...meta, timestamp: new Date().toISOString() });\n  }\n\n  public static error(message: string, meta?: Record<string, any>): void {\n    this.logger.error(message, {\n      ...meta,\n      timestamp: new Date().toISOString(),\n      trace: new Error().stack\n    });\n  }\n\n  public static debug(message: string, meta?: Record<string, any>): void {\n    this.logger.debug(message, { ...meta, timestamp: new Date().toISOString() });\n  }\n\n  // Méthodes utilitaires\n  public static getLogger(): winston.Logger {\n    return this.logger;\n  }\n\n  public static setLogLevel(level: string): void {\n    this.logger.level = level;\n  }\n\n  public static clearLogFiles(): void {\n    if (fs.existsSync(this.LOG_DIR)) {\n      fs.readdirSync(this.LOG_DIR).forEach(file => {\n        const path = `${this.LOG_DIR}/${file}`;\n        fs.unlinkSync(path);\n      });\n    }\n  }\n}"]}